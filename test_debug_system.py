#!/usr/bin/env python3
"""
Script de Teste para Sistema Enhanced de Debug de Licita√ß√µes
Testa todas as funcionalidades implementadas com exemplos pr√°ticos
"""
import requests
import json
import sys
import time
from typing import Dict, Any

# Configura√ß√£o da API
BASE_URL = "http://localhost:5001/api"
DEBUG_BASE = f"{BASE_URL}/debug"

def print_header(title: str):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "="*80)
    print(f"üß™ {title}")
    print("="*80)

def print_result(test_name: str, response: Dict[str, Any], success: bool = True):
    """Imprime resultado formatado"""
    status = "‚úÖ SUCESSO" if success else "‚ùå ERRO"
    print(f"\n{status} - {test_name}")
    print("-" * 50)
    print(json.dumps(response, indent=2, ensure_ascii=False))

def test_health_check():
    """Teste 1: Health Check do Sistema"""
    print_header("TESTE 1: Health Check do Sistema de Debug")
    
    try:
        response = requests.get(f"{DEBUG_BASE}/health", timeout=10)
        response.raise_for_status()
        
        result = response.json()
        print_result("Health Check", result)
        
        if result.get('success'):
            print("üéØ Sistema de debug est√° funcionando!")
            return True
        else:
            print("‚ö†Ô∏è Sistema de debug com problemas")
            return False
            
    except Exception as e:
        print_result("Health Check", {"error": str(e)}, False)
        return False

def test_consistency_report():
    """Teste 2: Relat√≥rio de Consist√™ncia"""
    print_header("TESTE 2: Relat√≥rio de Consist√™ncia Atual")
    
    try:
        response = requests.get(f"{DEBUG_BASE}/consistency-report", timeout=15)
        response.raise_for_status()
        
        result = response.json()
        print_result("Relat√≥rio de Consist√™ncia", result)
        return True
        
    except Exception as e:
        print_result("Relat√≥rio de Consist√™ncia", {"error": str(e)}, False)
        return False

def test_individual_licitacao():
    """Teste 3: An√°lise Individual de Licita√ß√£o"""
    print_header("TESTE 3: An√°lise Individual de Licita√ß√£o")
    
    # Vamos usar um ID que provavelmente existe baseado nos logs
    pncp_id = "08584229000122-1-000013/2025"
    
    try:
        response = requests.get(
            f"{DEBUG_BASE}/test-consistency",
            params={"pncp_id": pncp_id},
            timeout=30
        )
        
        result = response.json()
        print_result(f"Teste Individual - {pncp_id}", result, response.status_code == 200)
        
        if response.status_code == 200 and result.get('success'):
            print("üéØ Licita√ß√£o analisada com sucesso!")
        elif response.status_code == 404:
            print("‚ö†Ô∏è Licita√ß√£o n√£o encontrada - vamos tentar outro ID")
        
        return response.status_code == 200
        
    except Exception as e:
        print_result(f"Teste Individual - {pncp_id}", {"error": str(e)}, False)
        return False

def test_api_response_debug():
    """Teste 4: Debug Detalhado de Resposta da API"""
    print_header("TESTE 4: Debug Detalhado de Resposta da API")
    
    pncp_id = "08584229000122-1-000013/2025"
    
    try:
        response = requests.get(
            f"{DEBUG_BASE}/api-responses",
            params={"pncp_id": pncp_id},
            timeout=30
        )
        
        result = response.json()
        print_result(f"Debug API - {pncp_id}", result, response.status_code == 200)
        return response.status_code == 200
        
    except Exception as e:
        print_result(f"Debug API - {pncp_id}", {"error": str(e)}, False)
        return False

def test_licitacao_enrichment():
    """Teste 5: Enriquecimento de Licita√ß√£o"""
    print_header("TESTE 5: Enriquecimento de Licita√ß√£o com Dados Detalhados")
    
    # Dados de exemplo de uma licita√ß√£o (dados b√°sicos de busca)
    licitacao_exemplo = {
        "numeroControlePNCP": "08584229000122-1-000013/2025",
        "objetoCompra": "Contrata√ß√£o de servi√ßos de software",
        "valorTotalEstimado": 50000.00,
        "dataPublicacaoPncp": "2025-01-15T10:00:00Z",
        "modalidadeNome": "Preg√£o Eletr√¥nico"
    }
    
    try:
        response = requests.post(
            f"{DEBUG_BASE}/enrich-licitacao",
            json={"licitacao": licitacao_exemplo},
            timeout=30
        )
        
        result = response.json()
        print_result("Enriquecimento de Licita√ß√£o", result, response.status_code == 200)
        return response.status_code == 200
        
    except Exception as e:
        print_result("Enriquecimento de Licita√ß√£o", {"error": str(e)}, False)
        return False

def test_batch_analysis():
    """Teste 6: An√°lise em Lote"""
    print_header("TESTE 6: An√°lise de Consist√™ncia em Lote")
    
    # Lista de IDs para testar (alguns podem n√£o existir)
    pncp_ids = [
        "08584229000122-1-000013/2025",
        "04215147000150-1-000210/2025",
        "28305936000140-1-000129/2025"
    ]
    
    try:
        response = requests.post(
            f"{DEBUG_BASE}/batch-consistency",
            json={"pncp_ids": pncp_ids},
            timeout=60
        )
        
        result = response.json()
        print_result("An√°lise em Lote", result, response.status_code == 200)
        return response.status_code == 200
        
    except Exception as e:
        print_result("An√°lise em Lote", {"error": str(e)}, False)
        return False

def test_data_comparison():
    """Teste 7: Compara√ß√£o de Dados"""
    print_header("TESTE 7: Compara√ß√£o entre Dados de Busca vs Detalhes")
    
    # Dados simulados para compara√ß√£o
    dados_comparacao = {
        "search_data": {
            "numeroControlePNCP": "08584229000122-1-000013/2025",
            "objetoCompra": "Contrata√ß√£o de software b√°sico",
            "valorTotalEstimado": 50000.00,
            "modalidadeNome": "Preg√£o Eletr√¥nico"
        },
        "detail_data": {
            "numeroControlePNCP": "08584229000122-1-000013/2025",
            "objetoCompra": "Contrata√ß√£o de software avan√ßado com suporte t√©cnico",
            "valorTotalEstimado": 55000.00,
            "modalidadeNome": "Preg√£o Eletr√¥nico"
        }
    }
    
    try:
        response = requests.post(
            f"{DEBUG_BASE}/compare-data",
            json=dados_comparacao,
            timeout=30
        )
        
        result = response.json()
        print_result("Compara√ß√£o de Dados", result, response.status_code == 200)
        return response.status_code == 200
        
    except Exception as e:
        print_result("Compara√ß√£o de Dados", {"error": str(e)}, False)
        return False

def main():
    """Executa todos os testes do sistema de debug"""
    print_header("INICIANDO TESTES DO SISTEMA ENHANCED DE DEBUG")
    print("üéØ Testando todas as funcionalidades implementadas...")
    print(f"üîó Base URL: {DEBUG_BASE}")
    
    # Lista de testes
    tests = [
        ("Health Check", test_health_check),
        ("Relat√≥rio de Consist√™ncia", test_consistency_report),
        ("An√°lise Individual", test_individual_licitacao),
        ("Debug API", test_api_response_debug),
        ("Enriquecimento", test_licitacao_enrichment),
        ("An√°lise em Lote", test_batch_analysis),
        ("Compara√ß√£o de Dados", test_data_comparison)
    ]
    
    results = {}
    
    # Executar testes
    for test_name, test_func in tests:
        print(f"\n‚è≥ Executando: {test_name}...")
        start_time = time.time()
        
        try:
            success = test_func()
            results[test_name] = success
            elapsed = time.time() - start_time
            status = "‚úÖ" if success else "‚ùå"
            print(f"{status} {test_name} conclu√≠do em {elapsed:.2f}s")
        except Exception as e:
            results[test_name] = False
            print(f"‚ùå {test_name} falhou: {str(e)}")
    
    # Relat√≥rio final
    print_header("RELAT√ìRIO FINAL DOS TESTES")
    total_tests = len(results)
    successful_tests = sum(results.values())
    
    print(f"üìä Total de testes: {total_tests}")
    print(f"‚úÖ Sucessos: {successful_tests}")
    print(f"‚ùå Falhas: {total_tests - successful_tests}")
    print(f"üìà Taxa de sucesso: {(successful_tests/total_tests)*100:.1f}%")
    
    print("\nüìã Detalhes por teste:")
    for test_name, success in results.items():
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        print(f"  {status} - {test_name}")
    
    if successful_tests == total_tests:
        print("\nüéâ TODOS OS TESTES PASSARAM! Sistema enhanced funcionando perfeitamente!")
    else:
        print(f"\n‚ö†Ô∏è {total_tests - successful_tests} teste(s) falharam. Verifique os logs acima.")
    
    # Salvar relat√≥rio
    report = {
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "total_tests": total_tests,
        "successful_tests": successful_tests,
        "success_rate": (successful_tests/total_tests)*100,
        "test_results": results
    }
    
    with open("test_debug_report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ Relat√≥rio salvo em: test_debug_report.json")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Testes interrompidos pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• Erro inesperado: {str(e)}")
        sys.exit(1) 