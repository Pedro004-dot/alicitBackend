#!/usr/bin/env python3
"""
Script de DEBUG para analisar por que o filtro de relev√¢ncia est√° rejeitando todas as licita√ß√µes.
"""

import os
import sys

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from repositories.licitacao_repository import LicitacaoPNCPRepository
import logging
import asyncio

# Configurar logging para DEBUG
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def debug_filtro_relevancia():
    """
    Debug espec√≠fico do filtro de relev√¢ncia.
    """
    print("üîß DEBUG: Analisando filtro de relev√¢ncia")
    print("=" * 60)
    
    repo = LicitacaoPNCPRepository()
    
    # Buscar dados reais da API
    filtros = {
        "estados": ["SP"],
        "modalidades": ["pregao_eletronico"],
        "palavras_busca": ["limpeza"]
    }
    
    # 1. Fazer a busca na API sem filtro local
    print("\nüì° PASSO 1: Buscar dados da API...")
    
    # Construir par√¢metros
    params = repo._construir_parametros(filtros, ["limpeza"], 1, 5)
    print(f"üì§ Par√¢metros: {params}")
    
    # Fazer requisi√ß√£o direta
    import aiohttp
    async with aiohttp.ClientSession() as session:
        async with session.get("https://pncp.gov.br/api/consulta/v1/contratacoes/publicacao", params=params) as response:
            if response.status == 200:
                data = await response.json()
                licitacoes_raw = data.get('data', [])
                print(f"‚úÖ API retornou {len(licitacoes_raw)} licita√ß√µes")
            else:
                print(f"‚ùå Erro na API: {response.status}")
                return
    
    # 2. Analisar cada licita√ß√£o individualmente
    print(f"\nüîç PASSO 2: Analisando {len(licitacoes_raw)} licita√ß√µes...")
    
    for i, lic in enumerate(licitacoes_raw[:3]):  # S√≥ as 3 primeiras para debug
        print(f"\n--- LICITA√á√ÉO {i+1} ---")
        numero_controle = lic.get('numeroControlePNCP', 'N/A')
        objeto_compra = lic.get('objetoCompra', '')
        
        print(f"üÜî ID: {numero_controle}")
        print(f"üìù Objeto original: '{objeto_compra}'")
        
        # Normalizar texto
        objeto_normalizado = repo._normalizar_texto(objeto_compra)
        print(f"üìù Objeto normalizado: '{objeto_normalizado}'")
        
        # Testar relev√¢ncia com diferentes termos
        termos_teste = [
            ["limpeza"],
            ["limpeza", "higieniza√ß√£o", "asseio"],
            ["sistema"],
            ["equipamento"]
        ]
        
        for termos in termos_teste:
            score = repo._calcular_relevancia_objeto(objeto_compra, termos)
            print(f"   üéØ Score para {termos}: {score:.3f}")
            
            # Testar diferentes thresholds
            for threshold in [0.1, 0.3, 0.5, 0.7]:
                aprovado = "‚úÖ" if score >= threshold else "‚ùå"
                print(f"      {aprovado} Threshold {threshold:.1f}: {score:.3f}")
        
        print()
    
    # 3. Testar fun√ß√£o de normaliza√ß√£o
    print("\nüîß PASSO 3: Testando normaliza√ß√£o...")
    
    textos_teste = [
        "Servi√ßos de limpeza predial e conserva√ß√£o",
        "Aquisi√ß√£o de equipamentos de inform√°tica", 
        "Sistema de monitoramento de seguran√ßa",
        "PRESTA√á√ÉO DE SERVI√áOS DE LIMPEZA E CONSERVA√á√ÉO",
        "Licita√ß√£o para contrata√ß√£o de empresa"
    ]
    
    for texto in textos_teste:
        normalizado = repo._normalizar_texto(texto)
        print(f"üìù '{texto}' ‚Üí '{normalizado}'")
    
    # 4. Testar c√°lculo de relev√¢ncia manualmente
    print("\nüßÆ PASSO 4: Teste manual de relev√¢ncia...")
    
    casos_teste = [
        ("Servi√ßos de limpeza predial", ["limpeza"], "Match exato esperado"),
        ("Presta√ß√£o de servi√ßos de conserva√ß√£o e limpeza", ["limpeza"], "Match presente"),
        ("Aquisi√ß√£o de equipamentos", ["limpeza"], "Sem match esperado"),
        ("Sistema de inform√°tica", ["sistema", "informatica"], "Match duplo"),
        ("Servi√ßos gerais de manuten√ß√£o", ["limpeza"], "Sem match"),
    ]
    
    for objeto, termos, expectativa in casos_teste:
        score = repo._calcular_relevancia_objeto(objeto, termos)
        print(f"üìä '{objeto}' + {termos}")
        print(f"   ‚Üí Score: {score:.3f} ({expectativa})")
        print()

def debug_sync():
    """Vers√£o s√≠ncrona do debug."""
    asyncio.run(debug_filtro_relevancia())

if __name__ == "__main__":
    debug_sync() 