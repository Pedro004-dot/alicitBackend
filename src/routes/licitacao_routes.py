"""
Rotas para Busca de Licita√ß√µes
Define os endpoints da API para o novo fluxo de busca de licita√ß√µes.
"""
from flask import Blueprint
from controllers.licitacao_controller import LicitacaoController

# Cria um Blueprint para agrupar as rotas de licita√ß√£o.
# O prefixo '/api/licitacoes' ser√° adicionado a todas as rotas definidas aqui.
licitacao_routes = Blueprint('licitacoes', __name__, url_prefix='/api/licitacoes')

# Instancia o controller que cont√©m a l√≥gica de manipula√ß√£o das requisi√ß√µes.
licitacao_controller = LicitacaoController()

@licitacao_routes.route('/buscar', methods=['POST'])
def buscar_licitacoes():
    """
    POST /api/licitacoes/buscar
    Endpoint principal para busca avan√ßada de licita√ß√µes com NOVA ESTRAT√âGIA THIAGO.

    ‚úÖ NOVA IMPLEMENTA√á√ÉO: Agora usa as MESMAS FUN√á√ïES do GET para m√°xima consist√™ncia.
    ‚úÖ ESTRAT√âGIA: Busca ampla na API + Filtro rigoroso local + Sin√¥nimos locais
    
    Corpo da Requisi√ß√£o (JSON):
    {
        // === CAMPOS DE BUSCA (pelo menos um obrigat√≥rio) ===
        "palavra_chave": "string",              // Termo √∫nico de busca
        "palavras_busca": ["termo1", "termo2"], // OU lista de m√∫ltiplos termos
        
        // === FILTROS GEOGR√ÅFICOS (arrays JSON) ===
        "estados": ["SP", "RJ", "MG"],          // ‚úÖ M√∫ltiplos estados (array)
        "cidades": ["S√£o Paulo", "Rio de Janeiro"], // ‚úÖ M√∫ltiplas cidades (array)
        
        // === FILTROS DE LICITA√á√ÉO ===
        "modalidades": ["pregao_eletronico", "concorrencia"], // M√∫ltiplas modalidades
        "valor_minimo": 10000,                  // Valor m√≠nimo em reais
        "valor_maximo": 500000,                 // Valor m√°ximo em reais
        
        // === PAR√ÇMETROS DA ESTRAT√âGIA THIAGO ===
        "usar_sinonimos": true,                 // Expandir busca com sin√¥nimos locais
        "threshold_relevancia": 0.6,            // Rigor do filtro (0.0 a 1.0)
        
        // === PAGINA√á√ÉO (opcional - pode vir via query string) ===
        "pagina": 1,                           // P√°gina atual
        "itens_por_pagina": 50                 // Itens por p√°gina
    }

    Query Params (alternativa para pagina√ß√£o):
    - ?pagina=1
    - ?itens_por_pagina=50

    Exemplos de Uso:
    
    1. Busca simples:
    {
        "palavra_chave": "limpeza",
        "estados": ["SP", "RJ"]
    }
    
    2. Busca m√∫ltipla com filtros:
    {
        "palavras_busca": ["sistema", "software"],
        "estados": ["SP", "MG", "RJ"],
        "cidades": ["S√£o Paulo", "Belo Horizonte"],
        "modalidades": ["pregao_eletronico"],
        "valor_minimo": 50000,
        "usar_sinonimos": true,
        "threshold_relevancia": 0.5
    }

    Resposta de Sucesso (200 OK):
    {
        "success": true,
        "message": "Busca realizada com sucesso. Total de 123 licita√ß√µes encontradas.",
        "data": {
            "data": [...],              // Array de licita√ß√µes
            "metadados": {              // Metadados da busca
                "totalRegistros": 123,
                "totalPaginas": 3,
                "pagina": 1,
                "estrategia_busca": {
                    "tipo": "Thiago Melhorada",
                    "busca_ampla_api": true,
                    "filtro_local_rigoroso": true
                }
            }
        },
        "metodo": "POST com Nova Estrat√©gia Thiago",
        "filtros_aplicados": {...},
        "palavras_buscadas": [...]
    }

    ‚ö° Performance: Busca inteligente com m√∫ltiplas p√°ginas quando filtro de cidade √© usado.
    üéØ Relev√¢ncia: Sistema de score rigoroso com threshold configur√°vel.
    üîç Sin√¥nimos: Gera√ß√£o local via OpenAI (n√£o envia para API do PNCP).
    """
    # Delega toda a l√≥gica para o m√©todo 'buscar' do controller.
    return licitacao_controller.buscar()

@licitacao_routes.route('/buscar', methods=['GET'])
def buscar_licitacoes_get():
    """
    GET /api/licitacoes/buscar
    Endpoint de busca de licita√ß√µes que aceita par√¢metros via query string.
    
    Query Parameters:
    - palavras_busca: string (obrigat√≥rio) - Termos de busca
    - pagina: int (opcional, padr√£o: 1) - P√°gina atual
    - itens_por_pagina: int (opcional, padr√£o: 50) - Itens por p√°gina
    - estados: string (opcional) - UFs separadas por v√≠rgula (ex: "SP,RJ,MG")
    - cidades: string (opcional) - Cidades separadas por v√≠rgula
    - modalidades: string (opcional) - Modalidades separadas por v√≠rgula
    - valor_minimo: float (opcional) - Valor m√≠nimo da licita√ß√£o
    - valor_maximo: float (opcional) - Valor m√°ximo da licita√ß√£o
    
    Exemplo: /api/licitacoes/buscar?palavras_busca=software&estados=SP,RJ&modalidades=pregao_eletronico
    """
    return licitacao_controller.buscar_get() 