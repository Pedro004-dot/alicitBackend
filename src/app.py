"""
Aplica√ß√£o Flask principal - Inicializador do Backend Alicit
Conex√£o direta com Supabase PostgreSQL (sem mock)
"""

import os
import sys
import logging
import traceback
from pathlib import Path
from flask import Flask, jsonify, send_from_directory
from flask_cors import CORS
from dotenv import load_dotenv
from datetime import datetime

# Importar nova configura√ß√£o de logging
from config.logging_config import setup_logging

# Carregar vari√°veis de ambiente
load_dotenv('config.env')

def create_app(config: dict = None) -> Flask:
    """
    Factory para criar aplica√ß√£o Flask
    
    Args:
        config: Dicion√°rio de configura√ß√µes (opcional)
        
    Returns:
        Flask: Inst√¢ncia configurada da aplica√ß√£o
    """
    app = Flask(__name__)
    
    _configure_app(app, config)
    _setup_cors(app)
    _initialize_database(app)
    _initialize_rag_service(app)
    _register_blueprints(app)
    _register_error_handlers(app)
    
    return app

def _configure_app(app: Flask, config: dict = None) -> None:
    """Configurar aplica√ß√£o com Supabase via vari√°veis de ambiente"""
    
    # Configura√ß√µes usando vari√°veis de ambiente do config.env
    default_config = {
        'DEBUG': os.getenv('FLASK_DEBUG', 'True').lower() == 'true',
        'SECRET_KEY': os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production'),
        # Configura√ß√£o Supabase via vari√°veis de ambiente
        'SUPABASE_URL': os.getenv('SUPABASE_URL'),
        'SUPABASE_SERVICE_KEY': os.getenv('SUPABASE_SERVICE_KEY'),  # Para opera√ß√µes administrativas
        'SUPABASE_ANON_KEY': os.getenv('SUPABASE_ANON_KEY'),  # Para opera√ß√µes p√∫blicas
        'DATABASE_URL': os.getenv('DATABASE_URL'),
        'LOG_LEVEL': os.getenv('LOG_LEVEL', 'INFO'),
        'CORS_ORIGINS': os.getenv('CORS_ORIGINS', 'https://alicit-front.vercel.app,http://localhost:3000').split(','),
        'JSON_SORT_KEYS': False,
        'JSONIFY_PRETTYPRINT_REGULAR': True,
        # Configura√ß√µes RAG
        'REDIS_HOST': os.getenv('REDIS_HOST'),
        'OPENAI_API_KEY': os.getenv('OPENAI_API_KEY'),
    }
    
    # Validar configura√ß√µes essenciais
    required_configs = ['SUPABASE_URL', 'SUPABASE_ANON_KEY', 'DATABASE_URL']
    missing_configs = []
    
    for config_key in required_configs:
        if not default_config.get(config_key):
            missing_configs.append(config_key)
    
    if missing_configs:
        raise ValueError(f"‚ùå Configura√ß√µes obrigat√≥rias n√£o encontradas: {', '.join(missing_configs)}")
    
    app.config.update(default_config)
    
    if config:
        app.config.update(config)
    
    # Log das configura√ß√µes carregadas (sem expor dados sens√≠veis)
    app.logger.info("üîß Configura√ß√µes carregadas do config.env:")
    app.logger.info(f"  - SUPABASE_URL: {app.config['SUPABASE_URL']}")
    app.logger.info(f"  - DATABASE_URL: {'‚úÖ Configurado' if app.config['DATABASE_URL'] else '‚ùå N√£o configurado'}")
    app.logger.info(f"  - SUPABASE_ANON_KEY: {'‚úÖ Configurado' if app.config['SUPABASE_ANON_KEY'] else '‚ùå N√£o configurado'}")
    app.logger.info(f"  - REDIS_HOST: {app.config['REDIS_HOST']}")
    app.logger.info(f"  - LOG_LEVEL: {app.config['LOG_LEVEL']}")
    app.logger.info(f"  - DEBUG: {app.config['DEBUG']}")

def _initialize_database(app: Flask) -> None:
    """Inicializar pool de conex√µes PostgreSQL"""
    try:
        # As vari√°veis de ambiente j√° foram carregadas pelo env_loader
        # Vamos confirmar que est√£o dispon√≠veis
        database_url = app.config.get('DATABASE_URL')
        supabase_url = app.config.get('SUPABASE_URL')
        
        if not database_url:
            raise ValueError("DATABASE_URL n√£o encontrada nas configura√ß√µes")
        
        if not supabase_url:
            raise ValueError("SUPABASE_URL n√£o encontrada nas configura√ß√µes")
        
        # Import tardio e defensivo do database manager
        from config.database import get_db_manager
        
        # Obter inst√¢ncia com lazy loading
        app.logger.info("üîÑ Inicializando DatabaseManager...")
        db_manager = get_db_manager()
        
        # Verificar conectividade
        health_status = db_manager.get_health_status()
        if health_status['overall'] == 'healthy':
            app.logger.info("‚úÖ DatabaseManager inicializado com sucesso!")
            app.logger.info(f"üîó PostgreSQL: {health_status['connections']['postgresql']['status']}")
        else:
            app.logger.warning("‚ö†Ô∏è DatabaseManager com problemas de conectividade")
            app.logger.warning(f"‚ùå Status: {health_status['connections']['postgresql'].get('error', 'Erro desconhecido')}")
        
        # üèóÔ∏è NOVO: Inicializar DataMappers escal√°veis
        try:
            import adapters.mappers
            app.logger.info("‚úÖ DataMappers inicializados para arquitetura escal√°vel")
        except Exception as e:
            app.logger.warning(f"‚ö†Ô∏è Erro ao inicializar DataMappers: {e}")
            
        # Configurar encerramento gracioso do pool
        import atexit
        atexit.register(db_manager.close_pool)
        
    except ImportError as e:
        app.logger.error(f"‚ùå ERRO de importa√ß√£o: {e}")
        app.logger.error("üí° Verifique se o arquivo config/database.py existe e est√° correto")
        raise e
    except Exception as e:
        app.logger.error(f"‚ùå ERRO ao inicializar DatabaseManager: {e}")
        app.logger.error("üí° Verificando poss√≠veis solu√ß√µes:")
        app.logger.error("   1. Verifique conex√£o de internet")
        app.logger.error("   2. Verifique se as vari√°veis DATABASE_URL e SUPABASE_URL est√£o no config.env")
        app.logger.error("   3. Teste a conectividade com o Supabase")
        
        # Modo de desenvolvimento sem banco
        app.logger.warning("‚ö†Ô∏è MODO DESENVOLVIMENTO: Iniciando sem banco de dados")
        app.logger.warning("üí° Alguns endpoints que dependem do banco podem falhar")

def _initialize_rag_service(app: Flask) -> None:
    """Preparar RAG Service para inicializa√ß√£o lazy (sob demanda)"""
    try:
        app.logger.info("üîÑ Preparando RAGService para inicializa√ß√£o lazy...")
        
        # 1. Validar pr√©-requisitos (OpenAI API Key)
        openai_api_key = app.config.get('OPENAI_API_KEY')
        if not openai_api_key:
            app.logger.warning("‚ùå OPENAI_API_KEY n√£o encontrada. RAG ser√° inicializado sob demanda.")
            app.rag_service = None
            return

        # 2. Armazenar configura√ß√µes para inicializa√ß√£o lazy
        app.rag_config = {
            'openai_api_key': openai_api_key,
            'supabase_url': app.config.get('SUPABASE_URL'),
            'supabase_key': app.config.get('SUPABASE_ANON_KEY'),  # üîß CORRE√á√ÉO: usar ANON_KEY
            # Redis configurado via RedisConfig unificado - n√£o precisa passar host
        }
        
        # 3. Marcar que RAG est√° pronto para ser inicializado
        app.rag_service = None  # Ser√° inicializado na primeira chamada
        app.rag_initialized = False
        app.logger.info("‚úÖ RAGService configurado para inicializa√ß√£o lazy!")
        
    except Exception as e:
        app.logger.error(f"‚ùå ERRO ao preparar RAGService: {e}")
        app.logger.warning("‚ö†Ô∏è RAG endpoints estar√£o desativados.")
        app.rag_service = None
        app.rag_initialized = False

def get_rag_service(app):
    """Inicializar RAG service sob demanda (lazy loading)"""
    if hasattr(app, 'rag_initialized') and app.rag_initialized:
        return getattr(app, 'rag_service', None)
    
    if not hasattr(app, 'rag_config'):
        return None
        
    try:
        app.logger.info("üîÑ Inicializando RAGService sob demanda...")
        
        # Importar e inicializar componentes pesados agora
        from services.rag_service import RAGService
        from config.database import get_db_manager
        from core.unified_document_processor import UnifiedDocumentProcessor

        db_manager = get_db_manager()
        unified_processor = UnifiedDocumentProcessor(
            db_manager=db_manager,
            supabase_url=app.rag_config['supabase_url'],
            supabase_key=app.rag_config['supabase_key']
        )

        # Criar a inst√¢ncia do servi√ßo (Redis configurado automaticamente)
        rag_service = RAGService(
            db_manager=db_manager,
            unified_processor=unified_processor,
            openai_api_key=app.rag_config['openai_api_key']
            # Redis configurado automaticamente via RedisConfig
        )
        
        app.rag_service = rag_service
        app.rag_initialized = True
        app.logger.info("‚úÖ RAGService inicializado sob demanda!")
        return rag_service
        
    except Exception as e:
        app.logger.error(f"‚ùå ERRO ao inicializar RAGService sob demanda: {e}")
        app.rag_service = None
        app.rag_initialized = False
        return None

def _setup_cors(app: Flask) -> None:
    """Configurar CORS para permitir requisi√ß√µes do frontend"""
    # Configurar trailing slashes para evitar redirects 308
    app.url_map.strict_slashes = False
    
    # Usar origens configuradas nas vari√°veis de ambiente
    cors_origins = app.config.get('CORS_ORIGINS', ['*'])
    app.logger.info(f"üîí CORS configurado para origens: {cors_origins}")
    
    CORS(app, resources={
        r"/api/*": {
            "origins": cors_origins,
            "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
            "allow_headers": ["Content-Type", "Authorization"]
        }
    })

def _register_blueprints(app: Flask) -> None:
    """Registrar todos os blueprints da aplica√ß√£o"""
    
    try:
        # Imports absolutos para blueprints
        from routes.company_routes import company_routes
        from routes.bid_routes import bid_routes
        from routes.match_routes import match_routes
        from routes.system_routes import system_routes
        from routes.rag_routes import create_rag_routes # ‚úÖ NOVO
        from routes.auth_routes import auth_routes # ‚úÖ AUTENTICA√á√ÉO
        from routes.licitacao_routes import licitacao_routes # ‚úÖ NOVA BUSCA DE LICITA√á√ïES
        from routes.quality_match_routes import quality_match_routes # üéØ QUALITY MATCHING
        from routes.debug_routes import debug_bp # üêû DEBUG E AN√ÅLISE DE DADOS
        from routes.unified_search_routes import unified_search_bp # üîç PHASE 3 - UNIFIED SEARCH
        from routes.test_persistence_routes import create_test_persistence_routes # üèóÔ∏è TESTE SISTEMA ESCAL√ÅVEL
  
        # Registrar blueprints
        app.register_blueprint(auth_routes)  # ‚úÖ Autentica√ß√£o primeiro
        app.register_blueprint(company_routes)
        app.register_blueprint(bid_routes)
        app.register_blueprint(match_routes)
        app.register_blueprint(quality_match_routes)  # üéØ Quality Matching
        app.register_blueprint(licitacao_routes)  # ‚úÖ NOVA BUSCA DE LICITA√á√ïES
        app.register_blueprint(unified_search_bp)  # üîç PHASE 3 - UNIFIED SEARCH
        app.register_blueprint(debug_bp)  # üêû DEBUG E AN√ÅLISE DE DADOS
        
        # üèóÔ∏è NOVO: Registrar rotas de teste da arquitetura escal√°vel
        test_persistence_bp = create_test_persistence_routes()
        if test_persistence_bp:
            app.register_blueprint(test_persistence_bp)
            app.logger.info("  üèóÔ∏è Test Persistence: 5 endpoints (/api/test/persistence/*)")
        else:
            app.logger.warning("  ‚ùå Test Persistence: rotas desativadas")
    
        app.register_blueprint(system_routes)
        
        # Registrar rotas RAG com lazy loading
        if hasattr(app, 'rag_config'):
            # Criar blueprint que usa lazy loading
            from routes.rag_routes import create_rag_routes_lazy
            rag_bp = create_rag_routes_lazy()
            app.register_blueprint(rag_bp)
            app.logger.info("  ‚úÖ RAG: 4 endpoints (/api/rag/*) - lazy loading")
        else:
            app.logger.warning("  ‚ùå RAG: rotas desativadas devido a configura√ß√£o insuficiente.")
        
        
        # Log resumo
        app.logger.info("üöÄ Aplica√ß√£o modular inicializada:")
        app.logger.info("  ‚úÖ Authentication: 15 endpoints (/api/auth/*)")
        app.logger.info("  ‚úÖ Companies: 8 endpoints (/api/companies/*)")
        app.logger.info("  ‚úÖ Bids: 10 endpoints (/api/bids/*)")
        app.logger.info("  ‚úÖ Matches: 4 endpoints (/api/matches/*)")
        app.logger.info("  üéØ Quality Matches: 4 endpoints (/api/quality-matches/*)")
        app.logger.info("  ‚úÖ Licitacoes: 1 endpoint (/api/licitacoes/buscar)")
        app.logger.info("  üîç Unified Search: 6 endpoints (/api/search/*) - PHASE 3")
        app.logger.info("  üêû Debug: 7 endpoints (/api/debug/*)")
        app.logger.info("  ‚úÖ System: 7 endpoints (/api/status/*, /api/config/*, etc)")
        app.logger.info("  üÜï Chat: 8 endpoints (/api/licitacoes/*/chat, /api/admin/rag)")
        app.logger.info("  üìä TOTAL: 89 endpoints ativos")
        
        app.logger.info("‚úÖ Todos os blueprints registrados com sucesso!")
        
        # Rota para servir arquivos de documentos
        @app.route('/storage/licitacoes/<licitacao_id>/<filename>')
        def serve_document(licitacao_id, filename):
            """Serve documentos da pasta storage/licitacoes/{licitacao_id}"""
            try:
                storage_path = os.path.join(os.getcwd(), 'storage', 'licitacoes', licitacao_id)
                return send_from_directory(storage_path, filename)
            except Exception as e:
                return jsonify({'error': f'Arquivo n√£o encontrado: {e}'}), 404
        
        # Rota de health check aprimorado
        @app.route('/health')
        def health_check():
            """Health check completo da aplica√ß√£o"""
            try:
                # Verificar conex√£o com banco
                from config.database import get_db_manager
                db_manager = get_db_manager()
                health_status = db_manager.get_health_status()
                
                response = {
                    'status': 'healthy',
                    'message': 'API funcionando corretamente',
                    'timestamp': datetime.now().isoformat(),
                    'environment': os.getenv('RAILWAY_ENVIRONMENT_NAME', 'development'),
                    'port': os.getenv('PORT', 'default'),
                    'database': health_status.get('connections', {}).get('postgresql', {}).get('status', 'unknown'),
                    'endpoints': 64,
                    'version': '1.0.0'
                }
                
                return jsonify(response), 200
                
            except Exception as e:
                error_response = {
                    'status': 'unhealthy',
                    'message': f'Erro no health check: {str(e)}',
                    'timestamp': datetime.now().isoformat(),
                    'environment': os.getenv('RAILWAY_ENVIRONMENT_NAME', 'development')
                }
                app.logger.error(f"‚ùå Health check failed: {e}")
                return jsonify(error_response), 503
        
        # Health check simples para Railway
        @app.route('/healthz')
        def simple_health():
            """Health check simples para Railway"""
            return "OK", 200
        
    except ImportError as e:
        app.logger.error(f"‚ùå Erro ao importar blueprints: {e}")
        app.logger.error("üí° Verifique se todos os arquivos de rotas existem")
        raise e

def _register_error_handlers(app: Flask) -> None:
    """Registrar handlers globais de erro"""
    try:
        from middleware.error_handler import register_error_handlers
        register_error_handlers(app)
        app.logger.info("‚úÖ Error handlers registrados!")
    except ImportError:
        # Handler b√°sico
        @app.errorhandler(404)
        def not_found(error):
            return {'error': 'Endpoint n√£o encontrado'}, 404
            
        @app.errorhandler(500)
        def internal_error(error):
            return {'error': 'Erro interno do servidor'}, 500



def _create_directories() -> None:
    """Criar diret√≥rios necess√°rios"""
    directories = ['logs', 'uploads', 'temp']
    for directory in directories:
        os.makedirs(directory, exist_ok=True)

def main():
    """
    Fun√ß√£o principal para executar a aplica√ß√£o
    Detecta ambiente e executa adequadamente
    """
    # Configurar logging primeiro
    setup_logging()
    
    # Carregar vari√°veis de ambiente primeiro
    from config.env_loader import load_environment
    load_environment()
    
    # Criar diret√≥rios necess√°rios
    _create_directories()
    
    try:
        # Criar aplica√ß√£o
        app = create_app()
        
        # Verificar se est√° no Railway (produ√ß√£o)
        if os.getenv('RAILWAY_ENVIRONMENT_NAME'):
            print("üåç RAILWAY DETECTED - Aplica√ß√£o pronta para Gunicorn")
            print(f"üåç Environment: {os.getenv('RAILWAY_ENVIRONMENT_NAME')}")
            print(f"üîó Port: {os.getenv('PORT', 8080)}")
            print("‚úÖ Use: gunicorn -w 2 -b 0.0.0.0:8080 --preload app:app")
            # No Railway, o Dockerfile chama gunicorn diretamente
            return app
        else:
            print("üß™ DESENVOLVIMENTO - Executando Flask dev server")
            # Desenvolvimento local
            port = int(os.getenv('PORT', 5000))
            debug = os.getenv('FLASK_DEBUG', 'True').lower() == 'true'
            
            app.run(
                host='0.0.0.0',
                port=port,
                debug=debug
            )
            
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico na inicializa√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


# Para compatibilidade com gunicorn
app = create_app()

if __name__ == "__main__":
    main() 