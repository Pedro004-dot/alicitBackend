"""
üåê ComprasNet Data Mapper
Mapper espec√≠fico para convers√£o de dados do ComprasNet
Implementa BaseDataMapper para persist√™ncia escal√°vel
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime

from interfaces.data_mapper import BaseDataMapper, DatabaseOpportunity, OpportunityData

logger = logging.getLogger(__name__)

class ComprasNetDataMapper(BaseDataMapper):
    """
    Mapper espec√≠fico para dados do ComprasNet
    Converte OpportunityData do ComprasNet para formato de banco padronizado
    """
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.logger.info("üö´ ComprasNetDataMapper inicializado - SALVAMENTO AUTOM√ÅTICO DESATIVADO")
    
    @property
    def provider_name(self) -> str:
        """Nome do provider - deve corresponder ao ComprasNetAdapter"""
        return "comprasnet"
    
    def should_auto_save(self) -> bool:
        """
        üö´ SALVAMENTO AUTOM√ÅTICO DESATIVADO
        
        Returns:
            bool: False - nunca salvar automaticamente
        """
        return False
    
    def opportunity_to_database(self, opportunity: OpportunityData) -> DatabaseOpportunity:
        """
        Converte OpportunityData do ComprasNet para DatabaseOpportunity
        
        Args:
            opportunity: Dados da oportunidade do ComprasNet
            
        Returns:
            DatabaseOpportunity: Dados formatados para banco
        """
        try:
            # üîß VALIDA√á√ÉO E SANITIZA√á√ÉO DE DADOS
            
            # External ID obrigat√≥rio
            external_id = str(opportunity.external_id or '').strip()
            if not external_id:
                raise ValueError("External ID n√£o pode estar vazio")
            
            # T√≠tulo obrigat√≥rio e limitado
            title = str(opportunity.title or '').strip()[:500]  # Limitar a 500 chars
            if not title:
                title = f"Licita√ß√£o ComprasNet {external_id}"
            
            # Descri√ß√£o limitada
            description = str(opportunity.description or '').strip()[:1000] if opportunity.description else None
            
            # Valor estimado com valida√ß√£o
            estimated_value = None
            if opportunity.estimated_value is not None:
                try:
                    estimated_value = float(opportunity.estimated_value)
                    # Limitar valor m√°ximo para evitar overflow no banco
                    if estimated_value > 999999999999.99:
                        estimated_value = 999999999999.99
                    elif estimated_value < 0:
                        estimated_value = 0.0
                except (ValueError, TypeError):
                    estimated_value = None
                    self.logger.warning(f"Valor estimado inv√°lido para {external_id}: {opportunity.estimated_value}")
            
            # C√≥digos padronizados
            currency_code = str(opportunity.currency_code or 'BRL').upper()[:3]
            country_code = str(opportunity.country_code or 'BR').upper()[:2]
            region_code = str(opportunity.region_code or '').upper()[:2] if opportunity.region_code else None
            municipality = str(opportunity.municipality or '').strip()[:255] if opportunity.municipality else None
            
            # Datas com valida√ß√£o
            publication_date = self._validate_date(opportunity.publication_date)
            submission_deadline = self._validate_date(opportunity.submission_deadline)
            opening_date = self._validate_date(opportunity.opening_date)
            
            # üìä DADOS ESPEC√çFICOS DO COMPRASNET
            provider_data = opportunity.provider_specific_data or {}
            
            # Categorias e m√©todos
            category = self._extract_category(provider_data)
            subcategory = self._extract_subcategory(provider_data)
            procurement_method = self._extract_procurement_method(provider_data)
            
            # Status padronizado
            status = 'active'  # ComprasNet sempre retorna licita√ß√µes ativas
            
            # Entidades
            procuring_entity_id = str(provider_data.get('uasg', '')).strip()[:50] if provider_data.get('uasg') else None
            procuring_entity_name = str(opportunity.procuring_entity_name or '').strip()[:255] if opportunity.procuring_entity_name else None
            contracting_authority = procuring_entity_name
            
            # Informa√ß√µes de contato (ComprasNet n√£o fornece estruturado)
            contact_info = self._build_contact_info(provider_data)
            
            # Documentos (ComprasNet n√£o fornece documentos estruturados)
            documents = []
            
            # Informa√ß√µes adicionais com metadados robustos
            additional_info = self._build_additional_info(opportunity, provider_data)
            
            # üèóÔ∏è MONTAR DATABASE OPPORTUNITY
            db_opportunity = DatabaseOpportunity(
                provider_name=self.provider_name,
                external_id=external_id,
                title=title,
                description=description,
                estimated_value=estimated_value,
                currency_code=currency_code,
                country_code=country_code,
                region_code=region_code,
                municipality=municipality,
                publication_date=publication_date,
                submission_deadline=submission_deadline,
                opening_date=opening_date,
                category=category,
                subcategory=subcategory,
                procurement_method=procurement_method,
                status=status,
                source_url=str(opportunity.source_url or '').strip()[:500] if opportunity.source_url else None,
                procuring_entity_id=procuring_entity_id,
                procuring_entity_name=procuring_entity_name,
                contracting_authority=contracting_authority,
                contact_info=contact_info,
                documents=documents,
                additional_info=additional_info
            )
            
            self.logger.debug(f"‚úÖ ComprasNet opportunity {external_id} convertida para banco")
            return db_opportunity
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na convers√£o de opportunity {getattr(opportunity, 'external_id', 'N/A')}: {e}")
            raise e
    
    def database_to_opportunity(self, db_data: Dict[str, Any]) -> OpportunityData:
        """
        Converte dados do banco para OpportunityData
        
        Args:
            db_data: Dicion√°rio com dados do banco
            
        Returns:
            OpportunityData: Estrutura padronizada do provider
        """
        try:
            # Extrair informa√ß√µes adicionais
            additional_info = db_data.get('additional_info', {})
            
            # Criar OpportunityData a partir dos dados do banco
            opportunity = OpportunityData(
                external_id=db_data['external_id'],
                title=db_data['title'],
                description=db_data.get('description'),
                estimated_value=db_data.get('estimated_value'),
                currency_code=db_data.get('currency_code', 'BRL'),
                country_code=db_data.get('country_code', 'BR'),
                region_code=db_data.get('region_code'),
                municipality=db_data.get('municipality'),
                publication_date=db_data.get('publication_date'),
                submission_deadline=db_data.get('submission_deadline'),
                opening_date=db_data.get('opening_date'),
                procuring_entity_name=db_data.get('procuring_entity_name'),
                procuring_entity_id=db_data.get('procuring_entity_id'),
                source_url=db_data.get('source_url'),
                provider_specific_data=additional_info
            )
            
            # Adicionar provider_name
            opportunity.provider_name = self.provider_name
            
            return opportunity
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na convers√£o do banco para opportunity: {e}")
            raise e
    
    def validate_data(self, opportunity: OpportunityData) -> bool:
        """
        Valida se os dados est√£o no formato correto para o ComprasNet
        
        Args:
            opportunity: Dados a serem validados
            
        Returns:
            bool: True se v√°lidos, False caso contr√°rio
        """
        try:
            # Valida√ß√µes obrigat√≥rias
            if not opportunity.external_id:
                self.logger.error("External ID √© obrigat√≥rio")
                return False
            
            if not opportunity.title:
                self.logger.error("T√≠tulo √© obrigat√≥rio")
                return False
            
            # Validar provider_name
            if hasattr(opportunity, 'provider_name') and opportunity.provider_name != self.provider_name:
                self.logger.error(f"Provider name incorreto: esperado '{self.provider_name}', recebido '{opportunity.provider_name}'")
                return False
            
            # Validar valor estimado se presente
            if opportunity.estimated_value is not None:
                try:
                    float(opportunity.estimated_value)
                except (ValueError, TypeError):
                    self.logger.error(f"Valor estimado inv√°lido: {opportunity.estimated_value}")
                    return False
            
            # Validar datas se presentes
            for date_field, date_value in [
                ('publication_date', opportunity.publication_date),
                ('submission_deadline', opportunity.submission_deadline),
                ('opening_date', opportunity.opening_date)
            ]:
                if date_value and not self._validate_date(date_value):
                    self.logger.error(f"Data inv√°lida em {date_field}: {date_value}")
                return False
            
            self.logger.debug(f"‚úÖ Dados v√°lidos para opportunity {opportunity.external_id}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na valida√ß√£o: {e}")
            return False 
    
    # üîß M√âTODOS AUXILIARES PRIVADOS
    
    def _validate_date(self, date_str: Optional[str]) -> Optional[str]:
        """Valida e normaliza formato de data"""
        if not date_str:
            return None
        
        try:
            # Tentar parsing de diferentes formatos
            date_str = str(date_str).strip()
            
            # Formato ISO (YYYY-MM-DD)
            if '-' in date_str and len(date_str) >= 10:
                datetime.strptime(date_str[:10], '%Y-%m-%d')
                return date_str[:10]
            
            # Formato brasileiro (DD/MM/YYYY)
            if '/' in date_str and len(date_str) >= 10:
                dt = datetime.strptime(date_str[:10], '%d/%m/%Y')
                return dt.strftime('%Y-%m-%d')
            
            return None
            
        except (ValueError, TypeError):
            return None
    
    def _extract_category(self, provider_data: Dict[str, Any]) -> Optional[str]:
        """Extrai categoria da licita√ß√£o"""
        modality = provider_data.get('modality', '')
        if 'PREGAO' in str(modality).upper():
            return 'Preg√£o'
        elif 'CONCORRENCIA' in str(modality).upper():
            return 'Concorr√™ncia'
        elif 'TOMADA' in str(modality).upper():
            return 'Tomada de Pre√ßos'
        return 'Outros'
    
    def _extract_subcategory(self, provider_data: Dict[str, Any]) -> Optional[str]:
        """Extrai subcategoria da licita√ß√£o"""
        modality = provider_data.get('modality', '')
        if 'ELETRONICO' in str(modality).upper():
            return 'Eletr√¥nico'
        elif 'PRESENCIAL' in str(modality).upper():
            return 'Presencial'
        return None
    
    def _extract_procurement_method(self, provider_data: Dict[str, Any]) -> Optional[str]:
        """Extrai m√©todo de contrata√ß√£o"""
        return provider_data.get('modality', 'Preg√£o Eletr√¥nico')[:255]
    
    def _build_contact_info(self, provider_data: Dict[str, Any]) -> Dict[str, Any]:
        """Constr√≥i informa√ß√µes de contato"""
        contact_info = {}
        
        if provider_data.get('telefone'):
            contact_info['telefone'] = str(provider_data['telefone']).strip()[:50]
        
        if provider_data.get('endereco'):
            contact_info['endereco'] = str(provider_data['endereco']).strip()[:500]
        
        return contact_info
    
    def _build_additional_info(self, opportunity: OpportunityData, provider_data: Dict[str, Any]) -> Dict[str, Any]:
        """Constr√≥i informa√ß√µes adicionais com metadados robustos"""
        additional_info = {
            # Metadados do sistema
            'fonte_original': 'ComprasNet',
            'scraping_version': provider_data.get('scraping_version', '2.0'),
            'extraction_timestamp': provider_data.get('extraction_timestamp'),
            
            # üö´ Controle de salvamento
            'auto_save_disabled': True,
            'save_policy': 'on_user_access_only',
            'conversion_timestamp': datetime.now().isoformat(),
            
            # Dados espec√≠ficos do ComprasNet
            'numero_licitacao': provider_data.get('numero', ''),
            'modalidade': provider_data.get('modality', ''),
            'modprp': provider_data.get('modprp', ''),
            'uasg': provider_data.get('uasg', ''),
            'uf_sigla': provider_data.get('uf_sigla', ''),
            'localizacao': provider_data.get('endereco', ''),
            'telefone': provider_data.get('telefone', ''),
            'edital_info': provider_data.get('edital_info', ''),
            'bid_params': provider_data.get('bid_params'),
            'block_number': provider_data.get('block_number'),
            
            # URLs e refer√™ncias
            'url_consulta': opportunity.source_url or '',
            'source_url': provider_data.get('source_url', ''),
            
            # Dados de auditoria
            'raw_text_preview': str(provider_data.get('raw_text', ''))[:1000] if provider_data.get('raw_text') else '',
            'observacoes': 'Dados extra√≠dos via scraping do ComprasNet - N√ÉO salvos automaticamente',
            'processamento_timestamp': datetime.now().isoformat()
        }
        
        # Filtrar valores None e vazios
        return {k: v for k, v in additional_info.items() if v is not None and v != ''} 